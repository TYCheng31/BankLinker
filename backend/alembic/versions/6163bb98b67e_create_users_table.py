"""create users table

Revision ID: 6163bb98b67e
Revises: 
Create Date: 2025-08-12 15:38:41.145382

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6163bb98b67e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_bank_conn_provider'), table_name='bank_connections')
    op.drop_index(op.f('idx_bank_conn_user'), table_name='bank_connections')
    op.drop_table('bank_connections')
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('users', 'email',
               existing_type=postgresql.CITEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'full_name')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('full_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=postgresql.CITEXT(),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.create_table('bank_connections',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider', postgresql.ENUM('ESUN_BANK', 'CATHAY_BANK', 'LINE_BANK', name='bank_provider'), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('login_identifier_ct', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('login_identifier_iv', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('secret_ciphertext', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('secret_iv', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('auth_type', sa.TEXT(), server_default=sa.text("'PASSWORD'::text"), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'ACTIVE'::text"), autoincrement=False, nullable=False),
    sa.Column('last_success_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_error_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bank_connections_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bank_connections_pkey')),
    sa.UniqueConstraint('user_id', 'provider', name=op.f('bank_connections_user_id_provider_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_bank_conn_user'), 'bank_connections', ['user_id'], unique=False)
    op.create_index(op.f('idx_bank_conn_provider'), 'bank_connections', ['provider'], unique=False)
    # ### end Alembic commands ###
